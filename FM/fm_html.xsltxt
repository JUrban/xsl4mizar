
stylesheet 1.0;

// the import directive is useful because anything 
// imported can be later overrriden - we'll use it for
// the pretty-printing funcs
import ../MHTML/mhtml_block_top.xsl;  // ##INCLUDE HERE

output method=html;


// $Revision: 1.4 $
//
// File: fm_main.xsltxt - TeX-ization of Mizar XML, main file
//
// Author: Josef Urban
//
// License: GPL (GNU GENERAL PUBLIC LICENSE)

// XSLTXT (https://xsltxt.dev.java.net/) stylesheet taking 
// XML terms, formulas and types to FM format.

// To produce standard XSLT from this do e.g.: 
// java -jar ../xsltxt.jar toXSL fm_html.xsltxt >fm_html.xsl


// include fm_print_complex.xsl;

// include mhtml_block_top.xsl;  // ##INCLUDE HERE

// the FM specific code:

// XML file containing FM formats
#fmformats=  { "file:///home/urban/gr/xsl4mizar/FM/fm_formats.fmx"; }

// .bxx file with the bibtex info in xml (see article_bib.rnc)
#bibtex=  { `concat($anamelc, '.bbx')`; }

// lookup of the FMFormat based on the symbol, kind,argnr and leftargnr - 
// TODO: add the rightsymbol too (otherwise probably not unique)
key "FM" [FMFormatMap] `concat( @symbol, "::", @kind, ':', @argnr, ':', @leftargnr)`;


// symbols, overloaded for tex presentation
#for_s = { " \\forall "; }
#ex_s = { " \\exists "; }
#not_s = { " \\lnot "; }
#non_s = { " \\: non \\: "; }
#and_s = { " \\& "; }
#imp_s = { " \\Rightarrow "; }
#equiv_s = { " \\Leftrightarrow "; }
#or_s = { " \\lor "; }
#holds_s = { " \\: holds \\: "; }
#being_s = { " : "; }
#be_s = { " be "; }
#st_s = { " \\: st \\: "; }
#is_s = { " \\: is \\: "; }
#dots_s = { " ... "; }
#fraenkel_start = { " { "; }
#fraenkel_end = { " } "; }
#of_sel_s = { " \\: of \\: "; }
#of_typ_s = { " \\: of \\: "; }
#the_sel_s = { " \\: the \\: "; }
#choice_s = { " \\: the \\: "; }
#lbracket_s = { "("; }
#rbracket_s = { ")"; }


tpl [For](#i,#k,#ex,#pr) { 
  $j = { if [$i] { $i;} else { "0"; } }
  $l = { if [$k] { $k;} else { $j; } }

  if [$l = $j] { // print initial quantifier if at the beginning of var segment
     if [$pr] { copy-of $lbracket_s; " "; }
     if [$ex="1"] { copy-of $ex_s; } else { copy-of $for_s; }
  }
  pqvar(#nr = `$j + 1`, #vid = `@vid`);

  $nm = { `name(*[2])`; }
  $eq1 = { if [($nm = "For") and (*[1]/@nr = *[2]/*[1]/@nr)]
	      { are_equal(#el1=`*[1]`,#el2=`*[2]/*[1]`); }
           else { "0"; } }

  if [$eq1="1"]  {  ", "; apply[*[2]](#i=`$j+1`,#k=$l,#ex=$ex,#pr=$pr); }
  else {
  if [$ex="1"] { 
  copy-of $being_s; apply[*[1]](#i=`$j + 1`); 
  if [$nm = "For"] { apply[*[2]](#i=`$j+1`,#ex=$ex); }
  else { copy-of $st_s; // $nm;
   if [($nm = "And") or (name(Not/*[1]) = "And") or (name(Not/*[1]) = "For")] { <br; }
   apply[Not/*[1]](#i=`$j+1`); 
   if [Pred|PrivPred|Is|Verum|ErrorFrm] { // " PREDFOR "; 
      apply[*[2]](#i=`$j+1`,#not="1"); } // for antonymous Preds
   else { if [And] { copy-of $lbracket_s; " "; 
        if [And[@pid=$pid_Or_And]]
	{
		 for-each [*[2]/*] { if [position()>1] { copy-of $or_s; }
		   $neg1 = { is_negative(#el=`.`); }
		   if [$neg1 = "1"] {
		   if [name() = "Not"] { apply[*[1]](#i=`$j+1`); } 
		     // now Pred, which is antonymous
		     else { apply[.](#i=`$j+1`,#not="1"); } }
                   else { if [name() = "For"] { apply[.](#i=`$j+1`,#ex="1"); } 
		   else { " not "; apply[.](#i=`$j+1`); } } }
	      }
       else { // pretend this is an impl
	ilist(#separ = $and_s, #elems=`*[2]/*[position()<last()]`, #i=`$j+1`,#pr="1"); copy-of $imp_s; 
	choose {
	when [*[2]/*[@pid=$pid_Impl_RightNot]] {  apply[*[2]/*[@pid=$pid_Impl_RightNot]/*[1]](#i=`$j+1`); }
	when [name(*[2]/*[position()=last()]) = "For"] { apply[*[2]/*[position()=last()]](#i=`$j+1`,#ex="1"); }
	otherwise {
	  $neg1 = { is_negative(#el=`*[2]/*[position()=last()]`); }
	  if [$neg1 = "1"] { if [name(*[2]/*[position()=last()]) = "Not"] {
			apply[*[2]/*[position()=last()]/*[1]](#i=`$j+1`); } 
			// now Pred, which is antonymous
                     else { apply[*[2]/*[position()=last()]](#i=`$j+1`,#not="1"); } }
	  else { copy-of $not_s; apply[*[2]/*[position()=last()]](#i=`$j+1`); } }
        }}  " "; copy-of $rbracket_s; }
    }
  }}
  else { 
   copy-of $being_s; apply[*[1]](#i=`$j + 1`); if [not(($nm = "For") or ($nm="Not"))] {copy-of $holds_s;} 
   if [($nm = "And") or ($nm="For")] { <br; }
   if [$nm="Not"] {  " ";  apply[*[2]](#i=`$j+1`,#st="1"); }
   else { " "; apply[*[2]](#i=`$j+1`); }}
  if [$pr] { " "; copy-of $rbracket_s; }
 } }

// tpl [And/For] { <div {"for B being"; apply[*[1]]; 	
//                copy-of $holds_s; <div { @class="add";  apply[*[2]]; } } }


// return 1 if this is a Not-ended sequence of For-s
tpl check_for_not(#el) { 
    if [(name($el)="Not") or (name($el)="Pred")] { is_negative(#el=$el); } 
    else { if [(name($el)="And") and (($el/@pid = $pid_Or_And) or ($el/@pid = $pid_Impl_And))] { "1"; }
    else { if [name($el)="For"] { check_for_not(#el=`$el/*[2]`); }
    else { "0"; }}}}

tpl [Not](#i,#pr,#st) 
{ 
    $fnb = { if [For] { check_for_not(#el=`*[1]/*[2]`); } else { "0"; } }
    if [$fnb="1"]  { apply[*[1]](#i=$i,#ex="1"); }
    else { if [Pred|Is|PrivPred|Verum|ErrorFrm] {  if [$st="1"] { copy-of $holds_s; }
	   apply[*[1]](#i=$i,#not="1"); }
    else 
    { 
         $i3= is_impl1(#el=`.`);
	 if [$i3 > 0] { // " IMPL1 "; $i3; 
            if [$st="1"] { copy-of $st_s; } else { copy-of $lbracket_s; " "; }
	     if [$i3=2] {
		ilist(#separ = $and_s, #elems=`*[1]/*[not(@pid=$pid_Impl_RightNot)]`, #i=$i,#pr="1"); 
		if [$st="1"] { copy-of $holds_s; <br; } else { copy-of $imp_s; }
		apply[*[1]/*[@pid=$pid_Impl_RightNot]/*[1]](#i=$i); }
             else { 
	        ilist(#separ = $and_s, #elems=`*[1]/*[position()<last()]`, #i=$i,#pr="1"); if [$st="1"] { copy-of $holds_s; <br; } else { copy-of $imp_s; }
                choose {
		when [$i3=3] { 
		     if [name(*[1]/*[position()=last()]) = "Not"] {
			apply[*[1]/*[position()=last()]/*[1]](#i=$i); } 
			// now Pred, which is antonymous
                     else { apply[*[1]/*[position()=last()]](#i=$i,#not="1"); } }
		when [$i3=4] { 
		     apply[*[1]/*[position()=last()]](#i=$i,#ex="1"); }
		when [$i3=5] { 
		     copy-of $not_s; apply[*[1]/*[position()=last()]](#i=$i); }
                }} if [not($st="1")] { " "; copy-of $rbracket_s; }

         }
         else {
	      if [$st="1"] { copy-of $holds_s; <br; }
	      $i1_1= is_or1(#el=`.`);
	      $i1= { if[$i1_1="1"] { "1"; } else {  // artifficially system-constructed complex fla, try some reconstruction
		     if[not(@pid) and (name(*[1])="And") and (count(*[1]/*)>=2)] { "1"; } else { "0";}}}
	      if [$i1="1"] { copy-of $lbracket_s; " "; // " OR1 "; 
		 for-each [*[1]/*] { if [position()>1] { copy-of $or_s; }
		   $neg1 = { is_negative(#el=`.`); }
		   if [$neg1 = "1"] {
		   if [name() = "Not"] { apply[*[1]](#i=$i); } 
		     // now Pred, which is antonymous
		     else { apply[.](#i=$i,#not="1"); } }
                   else { if [name() = "For"] { apply[.](#i=$i,#ex="1"); } 
		   else { copy-of $not_s; apply[.](#i=$i); } } }  " "; copy-of $rbracket_s;
	      }

              else { copy-of $not_s; if[@pid] { comment { "HUMANRECFAILED"; } } // else {"NOPID  ";} 
                     apply[*[1]](#i=$i); } } } } 
} 
// this was too AI, mizar is much simpler
// 	     $cnt=`count(*[1]/*)`; 
// 	     $pcnt1 = { if [$i3="1"] { count_positive(#els=`*[1]/*`,#nr=$cnt); } else {"10000";} }
// 	     $pcnt = $pcnt1;
// 	     // $pcnt1; ":"; $cnt; ":"; $i3;
//              if [($pcnt>0) and ($pcnt<$cnt)] {
// 	     // "hhhhhhhhhhhh";
// 		copy-of $lbracket_s; " "; put_positive(#separ=copy-of $and_s,#els=`*[1]/*`,#nr=$pcnt,#i=$i); copy-of $imp_s; 
// 		put_positive(#separ=copy-of $or_s,#els=`*[1]/*`,#nr=`$cnt - $pcnt`,#neg="1",#i=$i); copy-of $rbracket_s; 
// 	     }
//              else { if [($i3="1") and ($pcnt=0)] { copy-of $lbracket_s; " "; put_positive(#separ=copy-of $or_s,#els=`*[1]/*`,#nr=$cnt,#neg="1",#i=$i); copy-of $rbracket_s; }
//	     if [$i3="1"  and (*[1]/*[not(name()="Not")]) and (*[1]/Not)] { "( ( "; 
//	     ilist(#separ=$and_s, #elems=`*[1]/*[not(name()="Not")]`, #i=$i,#pr="1");
//	    " "; copy-of $rbracket_s; copy-of $imp_s; 
//	    copy-of $lbracket_s; " "; ilist(#separ=$or_s, #elems=`*[1]/Not/*[1]`, #i=$i,#pr="1"); " ) )"; }




tpl [And](#i,#pr) { $e1= is_equiv(#el=`.`); 
    if [$e1="1"] { copy-of $lbracket_s; " ";
       apply[*[1]/*[1]/*[1]](#i=$i,#pr="1"); copy-of $equiv_s;
       apply[*[1]/*[1]/*[2]/*[1]](#i=$i); " "; copy-of $rbracket_s; }
    else { // a bit risky
    if [(@pid=$pid_Iff) and (count(*)=2)] {
       $i1= is_impl(#el=`*[1]`);
       if [$i1="1"] { copy-of $lbracket_s; " "; apply[*[1]/*[1]/*[1]](#i=$i,#pr="1"); copy-of $equiv_s; 
			apply[*[1]/*[1]/*[2]/*[1]](#i=$i); " "; copy-of $rbracket_s; }
       else { $i2= is_impl(#el=`*[2]`);
       if [$i2="1"] { copy-of $lbracket_s; " "; apply[*[2]/*[1]/*[2]/*[1]](#i=$i,#pr="1"); copy-of $equiv_s; 
		      apply[*[2]/*[1]/*[1]](#i=$i); " "; copy-of $rbracket_s; }
       else { $i3 = is_impl1(#el=`*[1]`); $i4 = is_impl1(#el=`*[2]`);
       if [($i3 > 0) or ($i4 > 0)] { // select better impl - no, prefer the first
       $which = { if [($i3 = 0)] { "2"; } else { "1"; }}
//		  if [($i4 = 0)] { "1"; } else { 
//		  if [$i3 > $i4] { "2"; } else { "1"; }}}}
       $i5 = { if [$which=1] { $i3; } else { $i4; }}
       for-each [*[position()=$which]] { // " IFF2: "; $which; 
             copy-of $lbracket_s; " ";
	     if [$i5=2] {
		ilist(#separ = $and_s, #elems=`*[1]/*[not(@pid=$pid_Impl_RightNot)]`, #i=$i,#pr="1"); copy-of $equiv_s; 
		apply[*[1]/*[@pid=$pid_Impl_RightNot]/*[1]](#i=$i); }
             else { 
	        ilist(#separ = $and_s, #elems=`*[1]/*[position()<last()]`, #i=$i,#pr="1"); copy-of $equiv_s; 
                choose {
		when [$i5=3] { 
		     if [name(*[1]/*[position()=last()]) = "Not"] {
			apply[*[1]/*[position()=last()]/*[1]](#i=$i); } 
			// now Pred, which is antonymous
                     else { apply[*[1]/*[position()=last()]](#i=$i,#not="1"); } }
		when [$i5=4] { 
		     apply[*[1]/*[position()=last()]](#i=$i,#ex="1"); }
		when [$i5=5] { 
		     copy-of $not_s; apply[*[1]/*[position()=last()]](#i=$i); }
                }} " "; copy-of $rbracket_s;
	}}		      
       else { copy-of $lbracket_s; " "; comment { "HUMANRECFAILED";} ilist(#separ=$and_s, #elems=`*`, #i=$i,#pr="1"); " "; copy-of $rbracket_s; }}}}
    else { copy-of $lbracket_s; " "; // if[not(@pid)] { " NOPID ";} 
           ilist(#separ=$and_s, #elems=`*`, #i=$i,#pr="1"); " "; copy-of $rbracket_s; }}}


tpl [Pred](#i,#not,#pr) 
{
<Pred {  copy-of `@*`; 
    choose 
    {
      when [@kind='P']       { apply(#p=$p,#i=$i); }
      when [(@kind='V') or (@kind='R')]  
      { 
	   $pi = { patt_info(#k=`@kind`, #nr=`@nr`, #pid =`@pid`); }
	   $fnr = car(#l=$pi);
	   $antonym = cadr(#l=$pi);
	   $plink = third(#l=$pi);
	   $pid = { if [$plink="1"] { `@pid`; } else { "0";} }
	   $predattr = { if [$antonym>1] { "1";} else { "0"; }}
	   $neg = { if [$not="1"] { `($antonym + $not) mod 2`; }
		    else { `$antonym mod 2`; }}
           if [$neg="1"] { copy-of $not_s;}

	   @formatnr = $fnr;
	   @neg = $neg;
	   apply(#i=$i,#pr=$pr);
      } 
    }
}}
//,#sym1=abs(#k=`@kind`, #nr=`@nr`, #sym=abs1(#k=`@kind`, #nr=`@nr`))); }}
//  "[ "; list(#separ=",", #elems=`*`); "]"; }


tpl [PrivPred](#i,#pr,#not) { <PrivPred {  copy-of `@*`; if [$not="1"] { @neg = $neg; }
apply(#i=$i,#pr=$pr);}}
tpl [Is](#i,#pr,#not) { <Is {  copy-of `@*`; if [$not="1"] { @neg = $neg; }
	   apply(#i=$i,#pr=$pr);
}}
tpl [Verum](#i,#pr,#not) { <Verum {  copy-of `@*`; if [$not="1"] { @neg = $neg; }}}
tpl [ErrorFrm](#i,#pr,#not) { <ErrorFrm {  copy-of `@*`; if [$not="1"] { @neg = $neg; }}}

tpl [FlexFrm](#i,#pr,#not)
{ 
  <FlexFrm {  copy-of `@*`; if [$not="1"] { @neg = $neg; }
  apply(#pr=$pr,#i=$i,#not = $not);   
}}

// Terms
// #p is the parenthesis count
// #i is the size of the var stack
tpl [Var](#p,#i) { 
<Var {  copy-of `@*`; 
    if [$print_identifiers > 0]
    {
      $vid = { get_vid(#up = `$i - @nr`); }
      @varname = $vid;
    }

    apply(#p=$p,#i=$i); 
} 
}	

// search parent For and Fraenkel for #nr, return its vid
// #bound says how many vars ( -1) are currently quantified
// (depth of the quantifier stack), so we need to go 
// #bound - #nr times up (this is now passed just as #up)
tpl get_vid(#up) {
    if [name() = "For"] {
       if [$up = "0"] { `@vid`; }
       else { for-each [..] { get_vid(#up = `$up - 1`); } } 
    }
    else { 
    if [(name() = "Typ") and (name(..) = "Fraenkel")] {
       // the case for var inside fraenkel typ - 
       // only previous lamdaargs are available
       $tnr = `count(preceding-sibling::Typ)`;
       if [$up < $tnr] { 
          `preceding-sibling::Typ[position() = (last() - $up)]/@vid`; }
       else { for-each [../..] { get_vid(#up = `$up - $tnr`); } }
    }
    else {
    if [name() = "Fraenkel"] {
       // the case for var inside lambdaterm and lambdaformula -
       // all lamdaargs are available
       $tnr = `count(Typ)`;
       if [$up < $tnr] { 
          `Typ[position() = (last() - $up)]/@vid`; }
       else { for-each [..] { get_vid(#up = `$up - $tnr`); } }
    }
    else { for-each [..] { get_vid(#up = $up); } } } } 
}


// trickery to translate loci to constants and identifiers when needed
// this unfortunately does not work for IdentifyRegistration, so that's
// dealt with by looking at the compatibility fla now :-(
// ###TODO: also the constructor types
tpl [LocusVar](#p, #i) { <LocusVar {  copy-of `@*`; apply(#p=$p,#i=$i); } }
tpl [FreeVar](#p,#i) { <FreeVar {  copy-of `@*`; apply(#p=$p,#i=$i); } }
tpl [Const](#p,#i) { <Const {  copy-of `@*`; apply(#p=$p,#i=$i); } }
tpl [InfConst](#p,#i) { <InfConst {  copy-of `@*`; apply(#p=$p,#i=$i); } }
tpl [Num](#p,#i) {   <Num {  copy-of `@*`; apply(#p=$p,#i=$i); }  }
tpl [Func](#p,#i) { 
<Func {  copy-of `@*`; 
  if [@kind='F']  {
     apply(#p=$p,#i=$i); } 
  else { 

  $pi     = { patt_info(#k = `@kind`, #nr = `@nr`, #pid = `@pid`); }
  $fnr    = car(#l = $pi);
  @formatnr = $fnr;
  apply(#p=$p,#i=$i); 
}}}

tpl [PrivFunc](#p,#i) { <PrivFunc {  copy-of `@*`; apply(#p=$p,#i=$i); } }
tpl [ErrorTrm](#p,#i) { <ErrorTrm {  copy-of `@*`; apply(#p=$p,#i=$i); } }
tpl [Choice](#p,#i) { <Choice {  copy-of `@*`; apply(#p=$p,#i=$i); } }
tpl [Fraenkel](#p,#i) {<Fraenkel {  copy-of `@*`; apply(#p=$p,#i=$i); } }

// Types
// element Typ {
//    attribute kind { "M" | "G" | "L" | "errortyp" },
//    attribute nr { xsd:integer }?,
//    ( attribute absnr { xsd:integer },
//      attribute aid { xsd:string } )?,
//    attribute pid { xsd:integer }?,
//    Cluster*,
//    Term*
//  }
tpl [Typ](#i) 
{ 
   if [(@kind="M") or (@kind="G") or (@kind="L")] 
   { 
      $pi     = { patt_info(#k = `@kind`, #nr = `@nr`, #pid = `@pid`); }
      $fnr    = car(#l = $pi);	  
      $expand = cadr(#l = $pi);	  
      $plink  = third(#l = $pi);
      $k1     = { if [@kind = "M"] { "M"; } else { "L";} }

   <Typ { copy-of `@*`;
   @formatnr = $fnr;
   @expandable = $expand;
   apply(#i=$i);}
}
else
{
   <Typ { copy-of `@*`;
   apply(#i=$i);}
}
}


// Clusters
// only attributes with pid are now printed, unless %all=1;
// others are results of 
// cluster mechanisms - this holds in the current article 
// (.xml file) only, environmental files do not have the @pid 
// info (yet), so we print everything for them
tpl [Cluster](#i,#all) 
{ 

<Cluster {  copy-of `@*`; 

   if [($print_all_attrs = 1) or ($all = 1)]
   {
      apply(#i=$i); 
   }	
   else
   {
      apply[*[@pid]](#i=$i); 
   }
}
}

// Adjective
//  element Adjective {
//    attribute nr { xsd:integer },
//    attribute value { xsd:boolean }?,
//    ( attribute absnr { xsd:integer },
//      attribute aid { xsd:string } )?,
//    attribute kind { "V" }?,
//    attribute pid { xsd:integer }?,
//    Term*
//  }
tpl [Adjective](#i) 
{ 
     $pi    = { patt_info(#k="V", #nr=`@nr`, #pid =`@pid`); }
     $fnr   = car(#l = $pi);
     $anto  = cadr(#l = $pi);
     $plink = third(#l = $pi);

     $pid   = { if [$plink="1"] { `@pid`; } else { "0";} }
     $neg   = { if [@value="false"] { `($anto + 1) mod 2`; } else { `$anto mod 2`; }}

     <Adjective  
     {  
        copy-of `@*`; 
   	@formatnr = $fnr;
   	@neg = $neg;
	apply(#i=$i);  	
     }
}

// kill proofs
tpl [Proof] {}

tpl [Proposition] 
{ 
    if [following-sibling::*[1][(name()="By") and (@linked="true")]] 
    { 
       if [not((name(..) = "Consider") or (name(..) = "Reconsider") 
           or (name(..) = "Conclusion"))] 
       { 
          "then ";
       }
    }

    if [@nr>0] 
    { 
       if [($proof_links>0) and ($print_lab_identifiers = 0) 
            and not(string-length(@plevel)>0)]
       { 
	  plab1(#nr=`@nr`,#txt="Lemma"); 
       }
       else { pplab(#nr=`@nr`, #vid = `@vid`); }

       ": ";
    }

    "$"; apply; " "; "$";
}

tpl add_hs_attrs { }

tpl add_hs2_attrs { }

tpl add_hsNdiv_attrs { }

tpl add_ajax_attrs(#u) { }

tpl mkref(#aid, #nr, #k, #c, #nm) 
{
  $mk  =  { refkind(#kind = $k); }
  $alc =  { lc(#s = $aid); }

      if [$nm] 
      { 
        $nm; 
      }
      else 
      {
        $aid; ":";

        if [not($k="T")] 
	{
          $mk; " ";
        }

        $nr;
      }

}




// add the constructor/pattern href, $c tells if it is from current article
// #sym is optional Mizar symbol
// #pid links to  patterns instead of constructors
tpl absref(#elems, #c, #sym, #pid)
{ 
   $n1 = { if [($pid > 0)] { "N"; } else { ""; } }

   for-each [$elems] 
   { 
      $mk0  = mkind(#kind = `@kind`); 
      $mk   = { if [($pid > 0)] { `concat($mk0, "not")`; } else { $mk0; } }
      $alc  = lc(#s=`@aid`);


	 if [$sym] 
	 { 
	    $sym; 
	 }
	 else 
	 { 
	    if [$relnames > 0]
	    { 
	       $n1; `@kind`; `@relnr`; 
	    }
	    else 
	    { 
	       $n1; `@kind`; `@nr`; "_"; `@aid`;  
	    } 
	 }
      
   } 
}

tpl [AUTHOR|TITLE|ACKNOWLEDGEMENT|SUMMARY|NOTE|ADDRESS]
{ 
  pcomment(#str=`text()`); 
  apply;
}



tpl [DATE]
{ 
  pcomment(#str=`concat("Received ", @month," ", @day, ", ", @year)`); 
}


tpl [ARTICLE_BIB] { apply; }



// Default
tpl [/] { 

for-each [document($bibtex,/)] 
     {
        apply[ARTICLE_BIB];
     }


// first read the keys for imported stuff
//          apply[document($constrs,/)/Constructors/Constructor]; 
//          apply[document($thms,/)/Theorems/Theorem]; 
//          apply[document($schms,/)/Schemes/Scheme];
 
// then process the whole document
          apply; }
  
// tpl [*] { copy { apply [@*]; apply; } }
// tpl [@*] { copy-of `.`; }


# $Revision: 1.2 $
# File: frdgrm.rnc - Relax NG compact spec for the data needed for 
#                    translation of Mizar to TeX (FM); derived from
#                    the BNF spec at http://fm.uwb.edu.pl/proof-read/fm.ps.
#
# Authors: Josef Urban, Grzegorz Bancerek, ....
#
# License: GPL (GNU GENERAL PUBLIC LICENSE)

## File with formats for natural language translation
## (replacement for pub.frd)
FMFormatMaps = 
 element FMFormatMaps { FMFormatMap* }

## Mapping between a Mizar format and an FM format.
## It should allow fast lookup of an FMFormat by the
## Mizar format, i.e. by the symbol name and argnumbers
## (the symbol kind is probably redundant for lookup, given the
## current Mizar .voc-based technology).
## 
FMFormatMap =
 element FMFormatMap {
   attribute kind {'G'|'K'|'J'|'L'|'M'|'O'|'R'|'U'|'V'},
   attribute symbol { xsd:string },
   attribute aid { xsd:string },
   attribute symbolnr { xsd:integer },
   attribute argnr { xsd:integer },
   attribute leftargnr { xsd:integer }?,
   attribute rightsymbolnr { xsd:integer }?,
   attribute rightsymbolvoc { xsd:string }?,
   FMFormat
}

## FMFormat for natural language translation.
## This is a work in progress which should reasonably merge the
## four format kinds semiautomatically generated below.
## suggestions:
## - Functor-control-header/@texmode should be just optional 
##   boolean, the definite article should be merged with article, articlekind and also
##   defstyle
## - why have all the extra translation features only for functors - why not e.g.
##   for predicates too?
## - merge validity, and adjective and predicate kinds
FMFormat = 
 element FMFormat {
     FMControlHeader,
     FMTranslPattern
 }

## Control Header
FMControlHeader = ( FunctorControlHeader | PredicateControlHeader | TypeControlHeader | AdjectiveControlHeader )

## the translation pattern is a series of strings (encoding TeX writing)
## and integers (encoding the arguments substituted at their place)
FMTranslPattern = 
 element FMTranslPattern {
     ( Str | Int)+
 }

## String
Str = 
 element Str { 
     attribute s { xsd:string }
 }


## Operation kind with arguments
## This option determines the operation kind of the pattern and
## argument contexts. The context is the position of an argument w.r.t. 
## the operation symbol and is indicated by one of the operation kinds. 
## Moreover, the context includes the priority of the
## pattern/operation. The given operation kind is assigned by default as
## a context for argument 1 unless the operation is of an infix
## kind. Then the context of argument 1 is a postfix operation and the
## context of argument 2 is a prefix operation (with given or standard
## priority). If a context should be assigned to other arguments, it may
## be indicated in brackets after the letter of the operation kind (e.g.,"i(2,1)").
## kind values: l,k,m,r,q,w,t,b,i,x,y,c or other (should be marked somehow)
OpKind =
 element OpKind {
   attribute kind { 'prefix' | 'upperprefix' | 'lowerprefix' | 'postfix' | 'upperpostfix' | 'lowerpostfix' | 'overfix' | 'underfix' | 'infix' | 'nonassociativeinfix' | 'rightassociativeinfix' | 'circumfix' | 'otheroperation' }, 
   attribute arg1 { xsd:integer }?,
   attribute arg2 { xsd:integer }?
}

## the priority attribute - probably should be just the one-letter codes;
## TODO: The four additional codes used now should be turned to decimal numbers.
## This option classifies operations into 4 groups: weak (0, 1), additive
## (2-4), multiplicative (5-7), and strong (8, 9). If a weaker
## operation is an argument of a stronger one, it indicates a possible
## argument to be taken into parentheses. If this option is omitted, the
## standard priority is assigned as follows:
## l Prefix strong if Math-mode else weak additive; k Upper-prefix strong
## multiplicative; m Lower-prefix strong multiplicative; r Postfix strong; q
## Upper-postfix strong; w Lower-postfix strong; t Overfix very strong; b
## Underfix very strong; i Infix additive; x Not-associative-infix additive;
## y Right-associative-infix additive; c Circumfix very strong; Other-operation weak
Priority =    
 attribute priority { 'very-weak' | 'weak-1' | 'weak-w' | 'weak-additive' | 'additive-3' | 'additive-a' | 'strong-additive' | 'weak-multiplicative' | 'multiplicative-6' | 'multiplicative-m' | 'strong-multiplicative' | 'strong' | 'very-strong' }

## context of args
## TODO: What is the meaning of nr??
## TODO: How is this used??
## TOD: are the ways of overriding othogonal? - i.e. the forcing, defaults for priority, and this?
ArgumentContext =
 element ArgumentContext {
   attribute nr { xsd:integer },
   Priority?,
   OpKind
}

## note that Forcing is included in the OpKind+ syntax - any problems it might cause?
## The final Int* models the List-of-bracket-disabled-arguments.
## texmode: is either symbolic (math-mode (m) - between dollars) or verbal (horizontal) 
##   which either uses 'the' (h) before the functor or not (H).
##   This should be changed to two optional boolean attributes: 'symbolic' and 'the' - no:
##   most of them are symbolic
## bracketability: if 'closed' (c), brackets are not needed, 
##   while if open (o) brackets may be used
##   This should be changed into an optional boolean attribute 'closed' (because much more are open)
## defstyle: normal (no character) uses 'yields'; 'asingular' (s) and 'ansingular' (n)
##   uses 'is'; 'plural' (p) uses 'constitute'
##   This should be also optional, with default value 'normal' (l) (most of them)
## What says the first OpKind?: the position of an argument w.r.t. the operation symbol
## The optional OpKinds (i.e. the second and more) give additional contexts which force brackets;
## it seems that they do not use the potional numerical arguments
FunctorControlHeader =
 element FunctorControlHeader {
   attribute texmode {'symbolic' | 'the' | 'nonthe'},
   attribute bracketability { 'open' | 'closed'},
   attribute defstyle { 'normal' | 'asingular' | 'ansingular' | 'plural' },
   Priority?,
   OpKind+,
   ArgumentContext*,
   Int*
}
   
## I wonder why this is so simple in comparison with functors?
## predicatekind: m,h,i,j,s
##  TODO: how is this used??
## predicatevalidity: valid (nothing or y), repeated (n)
##  TODO: what is this used for??
PredicateControlHeader =
 element PredicateControlHeader {
   attribute predicatekind { 'symbolic' | 'simple-phrase' | 'is-phrase' | 'has-phrase' | 'sat-phrase' },
   attribute predicatevalidity { 'predicate-valid' | 'predicate-repeated' }
}

## merge article e.g. with FunctorControlHeader/@defstyle (and do something about texmode too)
## merge typevalidity and predicatevalidity
TypeControlHeader =
 element TypeControlHeader { 
   attribute texmode {'symbolic' | 'the' | 'nonthe'},
   attribute article  { 'a-article' | 'an-article' },
   attribute typevalidity { 'type-valid' | 'type-repeated' | 'type-abbreviation' } 
}

## merge predicatekind and adjectivekind
## what is the difference between 'has-adjective-w' and 'has-adjective-x'?
AdjectiveControlHeader =
 element AdjectiveControlHeader {
   attribute adjectivekind { 'a-adjective' | 'an-adjective' | 'empty-adjective' | 'has-adjective-w' | 'has-adjective-x' | 'sat-adjective' | 'noun-adjective' }
} 

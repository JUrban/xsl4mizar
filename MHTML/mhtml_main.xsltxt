
stylesheet 1.0
extension-element-prefixes = "dc";
xmlns dc "http://purl.org/dc/elements/1.1/";

output method=html;


// $Revision: 1.8 $
//
// File: mhtml_main.xsltxt - html-ization of Mizar XML, main file
//
// Author: Josef Urban
//
// License: GPL (GNU GENERAL PUBLIC LICENSE)



// XSLTXT (https://xsltxt.dev.java.net/) stylesheet taking 
// XML terms, formulas and types to less verbose format.

// To produce standard XSLT from this do e.g.: 
// java -jar xsltxt.jar toXSL miz.xsltxt | sed -e 's/<!\-\- *\(<\/*xsl:document.*\) *\-\->/\1/g' >miz.xsl
// (the sed hack is there because xsl:document is not yet supported by xsltxtx)

// Then e.g.: xsltproc miz.xsl ordinal2.pre >ordinal2.pre1


// TODO: number B vars in fraenkel - done since 1.72
//       handle F and H parenthesis as K parenthesis
//       article numbering in Ref?
//       absolute definiens numbers for thesisExpansions? - done
//       do not display BlockThesis for Proof? - done, should but should be optional for Now
//       add @nr to canceled
//       Constructor should know its serial number! - needed in defs
//       possibly also article?
//       change globally 'G' to 'L' for types? -> then change the
//       hacks here and in emacs.el
//       display definiens? - done

// NOTES: constructor disambiguation is done using the absolute numbers
//        (attribute 'nr' and 'aid' of the Constructor element.
//        This info for Constructors not defined in the article is
//        taken from the .atr file (see variable $constrs)


include mhtml_block_top.xsl;  // ##INCLUDE HERE

// Default
tpl [/] { if [$generate_items = "1"] { 
    apply[/*/JustifiedTheorem|/*/DefTheorem|/*/SchemeBlock];
    apply[//RCluster|//CCluster|//FCluster|//Definition|//IdentifyWithExp];
// top-level lemmas
   for-each [/*/Proposition] 
   {
// <xsl:document href="proofhtml/lemma/{$anamelc}.{@propnr}" format="html">
      apply[`.`];
// </xsl:document>
   $bogus=`1`;
   } 
}

else { 
  if [$body_only = "0"] { 
    <html { @prefix="oo: http://omdoc.org/ontology# owl: http://www.w3.org/2002/07/owl#";

// output the css defaults for div and p (for indenting)
        <style { @type="text/css";  "
div { padding: 0 0 0 0; margin: 0 0 0 0; } 
div.add { padding-left: 3mm; padding-bottom: 0mm;  margin: 0 0 0 0; } 
div.box { border-width:thin; border-color:blue; border-style:solid; }
p { margin: 0 0 0 0; } 
body {font-family: monospace; margin: 0px;}
a {text-decoration:none} a:hover { color: red; } 
a.ref { font-size:x-small; }
a.ref:link { color:green; } 
a.ref:hover { color: red; } 
a.txt:link { color:black; } 
a.txt:hover { color: red; } 
.wikiactions ul { background-color: DarkSeaGreen ; color:blue; margin: 0; padding: 6px; list-style-type: none; border-bottom: 1px solid #000; }
.wikiactions li { display: inline; padding: .2em .4em; }
.wikiactions a {text-decoration:underline;} 
span.kw {font-weight: bold; }
span.lab {font-style: italic; }
span.comment {font-style: italic; }
span.hide { display: none; }
span.p1:hover { color : inherit; background-color : #BAFFFF; } 
span.p2:hover { color : inherit; background-color : #FFCACA; }
span.p3:hover { color : inherit; background-color : #FFFFBA; }
span.p4:hover { color : inherit; background-color : #CACAFF; }
span.p5:hover { color : inherit; background-color : #CAFFCA; }
span.p0:hover { color : inherit; background-color : #FFBAFF; }
.default { background-color: white; color: black; } 
.default:hover { background-color: white; color: black; }
#tt { position:absolute; display:block; font-size: small; background: LightYellow; padding:2px 12px 3px 7px; margin-left:5px;}
:target { background: #5D9BF7; border: solid 1px #aaa;}
";
	                } 
        <head {  
<title { 
  if [$mk_header > 0]
  {
     $aname; ": "; for-each [document($hdr,/)/Header/dc:title] { `text()`; }
  }
  else { $aname; }}
<script { @type="text/javascript";

"
<!-- 

// for saving in rs
var mizhtm='"; $mizhtml; "';"; 
$mizjs1;
  }
}
        <body {  

	if[$wiki_links=1]
	{
	   <div 
	   {  
	      @class="wikiactions";
	      <ul
	      {
	        <li {  <a { @href=`concat($lmwikicgi,"?p=",$lgitproject,";a=edit;f=mml/",$anamelc,".miz")`; @rel="nofollow"; "Edit"; } }
	        <li {  <a { @href=`concat($lmwikicgi,"?p=",$lgitproject,";a=history;f=mml/",$anamelc,".miz")`; "History"; } }
		<li {  <a { @href=`concat($lmwikicgi,"?p=",$lgitproject,";a=blob_plain;f=mml/",$anamelc,".miz")`; @rel="nofollow"; "Raw"; } }
//		<li {  <a { @href=`concat("../discussion/",$anamelc, ".html")`; "Discussion"; } }
		<li {  <a { @href=$lmwikiindex; "Index"; } }
		<li {  <a { @href=`concat($lmwikicgi,"?p=",$lgitproject,";a=gitweb")`; "Gitweb"; } }
//		<li {  "Clone:"; $lgitclone; <br; }
               }
            }
        }

	if[$mk_header > 0] { apply[document($hdr,/)/Header/*]; <br; }

// first read the keys for imported stuff
//          apply[document($constrs,/)/Constructors/Constructor]; 
//          apply[document($thms,/)/Theorems/Theorem]; 
//          apply[document($schms,/)/Schemes/Scheme];
 
// then process the whole document
          apply; }}}
  
     // $body_only > 0
     else 
     {
       if[$mk_header > 0] { apply[document($hdr,/)/Header/*]; <br; }
       apply;
     }
  }
}
  
// tpl [*] { copy { apply [@*]; apply; } }
// tpl [@*] { copy-of `.`; }

// Header rules
tpl [dc:title] { pcomment(#str=`text()`); }
tpl [dc:creator] { pcomment(#str=`concat("by ", text())`); pcomment(#str=""); }
tpl [dc:date] { pcomment(#str=`concat("Received ", text())`); }
tpl [dc:rights] { pcomment(#str=`concat("Copyright ", text())`); }

// comment rules

tpl [Comment] 
{ 
   <div { @class="comment";
   	if [$colored="1"] {
          <font {@color=$commentcolor; apply; }
     	}
     	else {  apply; }
   }
}
tpl [CmtLine]  { `text()`; <br; }
tpl [CmtLink]  { ":: "; add_wp_icon(); " "; for-each [*] { copy { copy-of `@*`; copy-of `text()`;}} <br; }

tpl add_wp_icon
{
     <img
     {
       	       @src= `concat($ltptproot,"WP.ico")`;
       	       @alt= "WP: ";
     }
}

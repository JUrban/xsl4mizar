stylesheet 1.0;

output method=html;

include mhtml_frmtrm.xsl;

// $Revision: 1.28 $
//
// File: reasoning.xsltxt - html-ization of Mizar XML, code for reasoning items
//
// Author: Josef Urban
//
// License: GPL (GNU GENERAL PUBLIC LICENSE)



tpl [Proposition] 
{ 
    if [$proof_links>0] {<a { @NAME=propname(#n=`@propnr`, #pl=`@plevel`); }}

    if [following-sibling::*[1][(name()="By") and (@linked="true")]] 
    { 
       if [not((name(..) = "Consider") or (name(..) = "Reconsider") 
           or (name(..) = "Conclusion"))] 
       { 
          <b { "then "; } 
       }
    }

    if [@nr>0] 
    { 
       if [($proof_links>0) and ($print_lab_identifiers = 0) 
            and not(string-length(@plevel)>0)]
       { 
	  plab1(#nr=`@nr`,#txt="Lemma"); 
       }
       else { pplab(#nr=`@nr`, #vid = `@vid`); }

       ": ";
    }

    // ###TODO: include the possible link when generating items
    if [($generate_items>0) and not(string-length(@plevel)>0)] 
    { 
       if [name(..) = "SchemeBlock"] { apply; " "; }
       else
       {
         if [not(name(..) = "SchemePremises")]
	 {
	   pcomment(#str = `concat($aname, ":lemma ", @propnr)`);
         }
	 apply; " "; 
	 if [($generate_items_proofs>0) and
	      (following-sibling::*[1][(name()="By") or (name()="From") or (name()="Proof")])] 
	 { 	 
	   apply[`following-sibling::*[1]`]; 
	 }
       }
    }
    else { apply; " ";} 
}

// Justifications
tpl linkbyif(#line,#col,#by) 
{ 
   if [$linkby>0] 
   { 
      $byurl = 
      { 
         choose 
	 { 
	    when [$linkby=1] { `concat($lbydir,$anamelc,"/",$line,"_",$col,".html")`; }
	    when [$linkby=2] { `concat($lbydlicgipref,$anamelc,"/",$line,"_",$col,".dli")`; } 
	    when [$linkby=3] { `concat($lbytptpcgi,"?article=",$anamelc,"&lc=",$line,"_",$col,"&tmp=",$lbytmpdir)`; } 

	 } 
      }

      <a { 
            if[$ajax_by > 0] { add_ajax_attrs(#u=$byurl); }
	    else
	    {
	       @href=$byurl; @class="txt"; 
	       if[$linkbytoself > 0] {@target="_self"; } else {@target="byATP";} 
            }
	    <b { $by; } <span { " "; } 
	 }
      
    }
    else { <b { $by; " "; } }
}

// if #nbr=1 then no <br; is put in the end 
// (used e.g. for conclusions, where definitional 
//  expansions are handled on the same line)
tpl [By	](#nbr) 
{ 
   if [(count(*)>0)] 
   { 
      linkbyif(#line = `@line`, #col = `@col`,#by = "by");
      <i { list(#separ = ", ", #elems = `Ref`); } 
      ";"; 
   }
   else 
   { 
      if [$linkby>0] {  linkbyif(#line = `@line`, #col = `@col`,#by = ";"); }
      else { ";"; }
   }

   if [not($nbr = "1")] { <br;  }
}

tpl [IterStep/By] { if [(count(*)>0)] { 
      linkbyif(#line=`@line`,#col=`@col`,#by="by");
      <i { list(#separ=", ", #elems=`Ref`); } }}
tpl [From](#nbr) { <b { "from "; }
        <i { getref(#k="S", #anr=`@articlenr`, #nr=`@nr`); "(";
             list(#separ=", ", #elems=`*`); ")"; ";"; 
      if [not($nbr="1")] { <br;  } } }
tpl [IterStep/From] { <b { "from "; } 
   <i { getref(#k="S", #anr=`@articlenr`, #nr=`@nr`); "(";
        list(#separ=", ", #elems=`*`); ")"; } }


// ##REQUIRE: the following two can be called only if $proof_links>0
tpl top_propname(#el) 
{ 
   for-each [$el/..] 
   {
      if [(name() = "DefTheorem") or (name() = "JustifiedTheorem")] 
      {
         $k = { if [@kind='D'] { "Def"; } else { "Th"; } }

         $nm = 
	 { 
	    if [($print_lab_identifiers > 0) and ($el/@vid > 0)] { get_vid_name(#vid = `$el/@vid`); }
	    else { `concat($k,@nr)`; }
         }

	 mkref(#aid = $aname, #nr = `@nr`, #k = `@kind`, #c = "1", #nm = $nm);
      }
      else 
      { 
         $k1 = `concat($el/@nr,":")`;
	 $k2 = `key("E",$k1)/@propnr`;

	 <a 
	 { 
	    @class = "txt"; 
	    @href  = `concat($anamelc, ".", $ext, "#","E",$k2)`;  
	    if [($print_lab_identifiers > 0) and ($el/@vid > 0)] 
	    { 
	       pplab(#nr = `$el/@nr`, #vid = `$el/@vid`);  
            }
	    else { plab1(#nr = `$el/@nr`, #txt = "Lemma"); }
         }
      }
   }
}


// name of private reference - name of the proposition
tpl privname(#nr,#pl) {
      $k1 = `concat($nr,":",$pl)`;
      if [key("E",$k1)] 
      { 
	 for-each [key("E",$k1)] 
	 {
	    if [not(string-length($pl)>0)] { top_propname(#el = `.`); }
	    else 
	    { 
	      $txt= { propname(#n = `@propnr`, #pl = $pl); } 
	      <a 
	      { 
	         @class = "txt"; 
//		 @href  = `concat($anamelc, ".", $ext, "#",$txt)`;
		 @href  = `concat("#",$txt)`;
		 pplab(#nr=`@nr`, #vid = `@vid`); 
              } 
            }
         } 
      }
      else { 
	   $ls = `string-length($pl)`;
	   if [$ls>0] { 
	      $pl1 = { get_parent_level(#pl=$pl,#ls=$ls,#n="1"); }
	      privname(#nr=$nr,#pl=$pl1); } }
 }


// count local constants introduced in the current element -
// this asssumes Let | Given | TakeAsVar | Consider | Set | Reconsider
tpl getcnr(#el) 
{ 
   `count($el/Typ)`; 
}

// relies on addabsrefs preprocessing
tpl get_nearest_level(#el) 
{ 
   for-each [$el] 
   { 
      if [@newlevel] 
      { 
         `@newlevel`;
      } 
      else 
      { 
         get_nearest_level(#el=`..`); 
      }
   }
}

tpl [Ref] 
{ 
   if [not(@articlenr)] 
   {  
      if [$proof_links = 0] 
      { 
         // experimental!!
	 $n1 = `@nr`;
	 $vid =  
	 { 
	   if [@vid] { `@vid`; }
	   else
	   {
              if [$print_lab_identifiers > 0] // makes things faster if not, cause this is expensive
              { 
//	 for-each [preceding::*[((name()="Proposition") or (name()="Now") or (name()="IterEquality")) and (@nr=$n1)][1]]
//       this seems to be reasonably fast 
	         for-each [(preceding::Proposition[@nr=$n1]|preceding::Now[@nr=$n1]
                           |preceding::IterEquality[@nr=$n1])[last()]]
                 { `@vid`; }
	      }
	      else { "0"; }
           }
         }

         pplab(#nr = $n1, #vid= $vid);
      }
      else 
      { 
         $pl = get_nearest_level(#el = `..`); 
	 privname(#nr = `@nr`, #pl = $pl); 
      }
   }
   else 
   { 
      getref(#k = `@kind`, #anr = `@articlenr`, #nr = `@nr`);
   }
}

tpl [ErrorInf](#nbr) { "errorinference;"; if [not($nbr="1")] { <br;  } }
tpl [IterStep/ErrorInf] { "errorinference"; }
tpl [SkippedProof](#nbr) { <b { "@proof .. end;"; } 
			   if [not($nbr="1")] { <br;  } }
tpl [IterStep/SkippedProof] { <b { "@proof .. end;"; } }

//   Term, elIterStep+
tpl [IterEquality](#nbr) 
{ 
   if [IterStep[1]/By[@linked="true"]] 
   {
      if [not(name(..)="Conclusion")] { <b { "then ";}}
   }

   if [@nr>0] {  pplab(#nr = `@nr`, #vid = `@vid`); ": ";}

   apply[*[1]]; " = ";
   nlist(#separ=".= ", #elems=`IterStep`); ";"; 

   if [not($nbr="1")] { <br;  } 

}

tpl [IterStep] { apply;  }

// Skeleton steps
//tpl [Let] { $j=`@nr`; <b { "let "; } pconst(#nr=$j);
//             " be "; 
//            jlist(#j=$j, #sep2=" be ", #elems=`*`); 
//	    ";"; try_th_exps(); <br; }

// #fst tells to process in a sequence of Let's
// #beg is the beginning of const. sequence numbers 
tpl [Let](#fst,#beg) { 
  $has_thesis = { if [following-sibling::*[1][name()="Thesis"]] { "1"; }
		  else { "0"; }  }
  $it_step = { if [$has_thesis="1"] { "2"; } else { "1"; }} 
  if // if not first in a sequence, it is already handled - do nothing -
     // this prevents the default proof traversal of already handled Lets 
    [not($fst="1") and (preceding-sibling::*[position()=$it_step][name()="Let"])] {}
  else 
  { // try next Let for the same type - we cannot deal with thesis here 

  $next = 
  { 
     if [(count(Typ)=1) and 
         (following-sibling::*[position()=$it_step][name()="Let"][count(Typ)=1]) and
	 (($has_thesis="0") or 
	  ((following-sibling::*[1][name()="Thesis"][not(ThesisExpansions/Pair)])
	   and
	   (following-sibling::*[3][name()="Thesis"][not(ThesisExpansions/Pair)])))]
     {  
        are_equal_vid(#el1=`./Typ`, #el2=`following-sibling::*[position()=$it_step]/Typ`); 
     }
     else { "0"; }
  }

  if [$beg] // no thesis guaranteed, only one const guaranteed
	    // this sequence has already been started,
   {   
       ", "; ppconst(#nr = `@nr`, #vid = `Typ/@vid`);
       if [$next="1"] // and does not end here - print the rest
       {
          apply[following-sibling::*[position()=$it_step]](#fst="1",#beg=$beg);
       }
       else // or ends here - print the type, deal with following
       { 
          " be "; apply[Typ]; ";"; try_th_exps(); <br;
	  apply[following-sibling::*[position()=$it_step][name()="Let"]](#fst="1"); 
       }
   }
  else  // start of sequence
   {
       <b { "let "; }
       if [$next="1"] // not ending here; no thesis guaranteed, only one const guaranteed
       {
	  ppconst(#nr = `@nr`, #vid = `Typ/@vid`);
	  apply[following-sibling::*[position()=$it_step]](#fst="1",#beg=`@nr`);
       }
       else // print them all
       {
          jtlist(#j=`@nr - 1`, #sep2=" be ", #elems=`Typ`);
	  ";"; try_th_exps(); <br;
	  apply[following-sibling::*[position()=$it_step][name()="Let"]](#fst="1");
       }
   }
 }}

tpl [Assume] 
{ 
  <b { "assume "; }  
  if [count(*)>1] { <b { "that ";} <br; }
  andlist(#elems=`*`); ";"; 
  try_th_exps(); <br; 
} 

// should handle both the new version with the existential statement
// at the first position, and also the old version without it
tpl [Given] 
{ 
  $j=`@nr - 1`; 
  <b {"given ";} 
  jtlist(#j=$j, #sep2=" being ", #elems=`Typ`); 
  <b {" such that ";}
  andlist(#elems=`*[(name()="Proposition") and (position() > 1)]`); ";"; 
  try_th_exps(); <br; 
}

tpl [Take] { <b { "take ";} apply; ";"; try_th_exps(); <br; }
tpl [TakeAsVar] 
{ 
   <b { "take "; } ppconst(#nr=`@nr`, #vid = `Typ[1]/@vid`); " = ";   apply[*[2]]; 
		  ";"; try_th_exps(); <br; 
}

tpl [Conclusion] 
{ 
   if [(By[@linked = "true"]) or 
       (IterEquality/IterStep[1]/By[@linked = "true"])] 
   { 
      <b { "hence "; } 
      apply[*[not(name() = "By")]]; 
      apply[By](#nbr = "1"); 
      try_th_exps(); 
      <br; 
   }
   else 
   { 
      if [Now] 
      {  
         <div 
	 { 
	    <b {  "hereby "; } 
	    try_th_exps();
	    apply(#nkw = "1");  
	    <b { "end;"; } 
	 } 
      }
      else 
      { 
         <b { "thus "; } 

	 if [Proof] 
	 { 
	    apply[Proposition]; 
	    try_th_exps();
	    apply[Proof]; 
	 }
	 else 
	 { 
	    apply[Proposition]; 
	    apply[ IterEquality|By|From|ErrorInf|SkippedProof](#nbr = "1");
	    try_th_exps(); 
	    <br; 
	 } 
      } 
   }
}
// Auxiliary items

// First comes the reconstructed existential statement 
// and its justification, then the new local constants
// and zero or more propositions about them.
// For easier presentation, nr optionally contains the number   
// of the first local constant created here.      
//
//  element Consider { 
//    attribute nr { xsd:integer }?,
//    Proposition, Justification,
//    Typ+, Proposition*
//  }
tpl [Consider] 
{ 
   $j=`@nr - 1`; 

   <b 
   { 
      if [By[@linked="true"]] { "then "; }

      "consider ";
   }

   jtlist(#j = $j, #sep2 = " being ", #elems = `Typ`);

   if [count(Proposition) > 1] 
   { 
      <b {" such that "; } 
      <br; 
      andlist(#elems = `Proposition[position() > 1]`); 
   } 

   apply[*[2]]; 
}

// First comes the series of target types and reconsidered terms.
// For all these terms a new local variable with its target type
// is created, and its equality to the corresponding term is remembered.
// Finally the proposition about the typing is given and justified.
// For easier presentation, atNr optionally contains the number
// of the first local constant created here.
// Each type may optionally have presentational info about
// the variable (atVid) inside.
//  element elReconsider {
//    attribute atNr { xsd:integer }?,
//    (elTyp, Term)+,
//    elProposition, Justification
//  }
tpl [Reconsider] { $j=`@nr`; <b { if [By[@linked="true"]] { "then "; } 
    "reconsider "; } 
// should work both for old and new reconsider
    for-each [*[(not(name() = "Typ")) and (position() < (last() - 1))]] {
	 $p1 = `position()`;
	 ppconst(#nr=`$j + position() - 1`, #vid = `../Typ[$p1]/@vid`);
	 " = ";
	 apply[.];
	 if [not($p1=last())] { ", "; }}

//  ppconst(#nr=$j, #vid = `Typ[1]/@vid`); " = "; 
//  jlist(#j=$j, #sep2=" = ", #elems=`*[(not(name() = "Typ")) 
//                        and (position() < (last() - 1))]`);
    " as "; apply[*[1]]; " "; 
    apply[*[last()]]; } 

tpl [Set] { <b { "set ";} ppconst(#nr=`@nr`, #vid=`Typ/@vid`); " = "; apply[*[1]]; ";"; <br; }
tpl [DefFunc] { <b { "deffunc "; } ppfunc(#nr=`@nr`); "(";  
                list(#separ=",", #elems=`ArgTypes/Typ`); ") "; <b {"-> ";}
                apply[*[3]]; " = ";
	        apply[*[2]]; ";"; <br; }
tpl [DefPred] { <b { "defpred ";} pppred(#nr=`@nr`); "["; 
                list(#separ=",", #elems=`ArgTypes/Typ`); "] "; <b { "means "; }
	        apply[*[2]]; ";"; <br; }

// Thesis after skeleton item, with definiens numbers
// forbid as default
tpl [Thesis] { }

tpl do_thesis(#nd)
{
  apply[ThesisExpansions];
  
  if [($display_thesis = 1) and (not($nd = 1))] 
  {
        " ";
        <a 
	{   
	  add_hs_attrs();
	  pcomment0(#str=" thesis: ");      
	}

	<span { @class="hide"; " "; apply[*[1]]; }
  }
}

tpl try_th_exps_old
  { 
     apply[./following-sibling::*[1][name()="Thesis"]/ThesisExpansions]; 
  }

// #nd overrides the $display_thesis parameter in do_thesis,
// used to supress the incorrect PerCases thesis now
tpl try_th_exps(#nd)
{ 
  if [./following-sibling::*[1][name()="Thesis"]]
  {  
    for-each [./following-sibling::*[1][name()="Thesis"]]
    {
      do_thesis(#nd=$nd); 
    }
  }
  else { if [((name(..) = "Now") or (name(..) = "CaseBlock") or (name(..) = "SupposeBlock"))
              and (../BlockThesis/Thesis)]
  {
    $prev_thesis_changes 
      = `count(./preceding-sibling::*[(name()="Let") or (name()="Take") 
	                               or (name()="TakeAsVar") or (name()="Assume")
	                               or (name()="Case") or (name()="Suppose")
				       or (name()="Given") or (name()="Conclusion")])`;
    for-each [ ../BlockThesis/Thesis[$prev_thesis_changes + 1]]
    {
      do_thesis(#nd=$nd);
    }
  }}
}

tpl [ThesisExpansions] { if [Pair] {
    " "; pcomment0(#str="according to "); 
    list(#separ=",", #elems=`Pair[@x]`); } }


tpl [ThesisExpansions/Pair] 
{
  $x       = `@x`;
  $doc     = { if [key('DF',$x)] { ""; } else { $dfs; } }

  $current = { if [$doc=""] { "1"; } else { "0"; } }

  for-each [document($doc,/)] 
  {
     for-each [key('DF',$x)] 
     {
        mkref(#aid = `@aid`, #nr = `@defnr`, #k = "D", #c = $current);
     }
  }
}



//  special block skeleton items 
//  element Suppose { Proposition+ }
//  element Case { Proposition+ }
tpl [Case|Suppose] 
{
  if [count(*)>1] 
  {
    <b { "that "; }
  }
   
  andlist(#elems = `*`); ";"; 
  // this will break the thesis display in diffuse statements 
  // for earlier kernel (analyzer v. < 1.94) - mea culpa, 
  // the only reasonable backward-compatibility fix would be to 
  // keep the kernel version as a parameter and check it here
  try_th_exps();
  <br;
}

// element PerCases { Proposition, Inference } 
tpl [PerCases] 
{
  <a 
  {
     add_hs_attrs();
     <b { "cases "; }
  }

  <span 
  {
    @class = "hide";
    apply [*[1]];
  }

  apply [*[position()>1]];

  // thesis after per cases is broken yet and would have 
  // to be reconstructed from subblocks' theses;
  // don't display it, only display the expansions
  try_th_exps(#nd="1");
}



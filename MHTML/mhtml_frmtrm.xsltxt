stylesheet 1.0;

output method=html;

include mhtml_print_complex.xsl;


// $Revision: 1.12 $
//
// File: frmtrm.xsltxt - html-ization of Mizar XML, code for terms, formulas, and types
//
// Author: Josef Urban
//
// License: GPL (GNU GENERAL PUBLIC LICENSE)



// Formulas

// #i is nr of the bound variable, 0 by default 
// #k is start of the sequence of vars with the same type, $i by default 
// we now output only one typing for such sequences
// #ex tells that we should print it as existential statement,
// i.e. also omitting the first descending Not (the caller 
// should guarantee that there _is_ a Not after the block of For-s)
// #pr tells to put the formula in paranthesis
tpl [For](#i,#k,#ex,#pr) { 
  $j = { if [$i] { $i;} else { "0"; } }
  $l = { if [$k] { $k;} else { $j; } }

  if [$l = $j] { // print initial quantifier if at the beginning of var segment
     if [$pr] { copy-of $lbracket_s; " "; }
     if [$ex="1"] { copy-of $ex_s; } else { copy-of $for_s; }
  }
  pqvar(#nr = `$j + 1`, #vid = `@vid`);

  $nm = { `name(*[2])`; }
  $eq1 = { if [($nm = "For") and (*[1]/@nr = *[2]/*[1]/@nr)]
	      { are_equal(#el1=`*[1]`,#el2=`*[2]/*[1]`); }
           else { "0"; } }

  if [$eq1="1"]  {  ", "; apply[*[2]](#i=`$j+1`,#k=$l,#ex=$ex,#pr=$pr); }
  else {
  if [$ex="1"] { 
  copy-of $being_s; apply[*[1]](#i=`$j + 1`); 
  if [$nm = "For"] { apply[*[2]](#i=`$j+1`,#ex=$ex); }
  else { copy-of $st_s; // $nm;
   if [($nm = "And") or (name(Not/*[1]) = "And") or (name(Not/*[1]) = "For")] { <br; }
   apply[Not/*[1]](#i=`$j+1`); 
   if [Pred|PrivPred|Is|Verum|ErrorFrm] { // " PREDFOR "; 
      apply[*[2]](#i=`$j+1`,#not="1"); } // for antonymous Preds
   else { if [And] { copy-of $lbracket_s; " "; 
        if [And[@pid=$pid_Or_And]]
	{
		 for-each [*[2]/*] { if [position()>1] { copy-of $or_s; }
		   $neg1 = { is_negative(#el=`.`); }
		   if [$neg1 = "1"] {
		   if [name() = "Not"] { apply[*[1]](#i=`$j+1`); } 
		     // now Pred, which is antonymous
		     else { apply[.](#i=`$j+1`,#not="1"); } }
                   else { if [name() = "For"] { apply[.](#i=`$j+1`,#ex="1"); } 
		   else { " not "; apply[.](#i=`$j+1`); } } }
	      }
       else { // pretend this is an impl
	ilist(#separ = $and_s, #elems=`*[2]/*[position()<last()]`, #i=`$j+1`,#pr="1"); copy-of $imp_s; 
	choose {
	when [*[2]/*[@pid=$pid_Impl_RightNot]] {  apply[*[2]/*[@pid=$pid_Impl_RightNot]/*[1]](#i=`$j+1`); }
	when [name(*[2]/*[position()=last()]) = "For"] { apply[*[2]/*[position()=last()]](#i=`$j+1`,#ex="1"); }
	otherwise {
	  $neg1 = { is_negative(#el=`*[2]/*[position()=last()]`); }
	  if [$neg1 = "1"] { if [name(*[2]/*[position()=last()]) = "Not"] {
			apply[*[2]/*[position()=last()]/*[1]](#i=`$j+1`); } 
			// now Pred, which is antonymous
                     else { apply[*[2]/*[position()=last()]](#i=`$j+1`,#not="1"); } }
	  else { copy-of $not_s; apply[*[2]/*[position()=last()]](#i=`$j+1`); } }
        }}  " "; copy-of $rbracket_s; }
    }
  }}
  else { 
   copy-of $being_s; apply[*[1]](#i=`$j + 1`); if [not(($nm = "For") or ($nm="Not"))] {copy-of $holds_s;} 
   if [($nm = "And") or ($nm="For")] { <br; }
   if [$nm="Not"] {  " ";  apply[*[2]](#i=`$j+1`,#st="1"); }
   else { " "; apply[*[2]](#i=`$j+1`); }}
  if [$pr] { " "; copy-of $rbracket_s; }
 } }

// tpl [And/For] { <div {"for B being"; apply[*[1]]; 	
//                copy-of $holds_s; <div { @class="add";  apply[*[2]]; } } }


// return 1 if this is a Not-ended sequence of For-s
tpl check_for_not(#el) { 
    if [(name($el)="Not") or (name($el)="Pred")] { is_negative(#el=$el); } 
    else { if [(name($el)="And") and (($el/@pid = $pid_Or_And) or ($el/@pid = $pid_Impl_And))] { "1"; }
    else { if [name($el)="For"] { check_for_not(#el=`$el/*[2]`); }
    else { "0"; }}}}

tpl [Not](#i,#pr,#st) 
{ 
    $fnb = { if [For] { check_for_not(#el=`*[1]/*[2]`); } else { "0"; } }
    if [$fnb="1"]  { apply[*[1]](#i=$i,#ex="1"); }
    else { if [Pred|Is|PrivPred|Verum|ErrorFrm] {  if [$st="1"] { copy-of $holds_s; }
	   apply[*[1]](#i=$i,#not="1"); }
    else 
    { 
         $i3= is_impl1(#el=`.`);
	 if [$i3 > 0] { // " IMPL1 "; $i3; 
            if [$st="1"] { copy-of $st_s; } else { copy-of $lbracket_s; " "; }
	     if [$i3=2] {
		ilist(#separ = $and_s, #elems=`*[1]/*[not(@pid=$pid_Impl_RightNot)]`, #i=$i,#pr="1"); 
		if [$st="1"] { copy-of $holds_s; <br; } else { copy-of $imp_s; }
		apply[*[1]/*[@pid=$pid_Impl_RightNot]/*[1]](#i=$i); }
             else { 
	        ilist(#separ = $and_s, #elems=`*[1]/*[position()<last()]`, #i=$i,#pr="1"); if [$st="1"] { copy-of $holds_s; <br; } else { copy-of $imp_s; }
                choose {
		when [$i3=3] { 
		     if [name(*[1]/*[position()=last()]) = "Not"] {
			apply[*[1]/*[position()=last()]/*[1]](#i=$i); } 
			// now Pred, which is antonymous
                     else { apply[*[1]/*[position()=last()]](#i=$i,#not="1"); } }
		when [$i3=4] { 
		     apply[*[1]/*[position()=last()]](#i=$i,#ex="1"); }
		when [$i3=5] { 
		     copy-of $not_s; apply[*[1]/*[position()=last()]](#i=$i); }
                }} if [not($st="1")] { " "; copy-of $rbracket_s; }

         }
         else {
	      if [$st="1"] { copy-of $holds_s; <br; }
	      $i1_1= is_or1(#el=`.`);
	      $i1= { if[$i1_1="1"] { "1"; } else {  // artifficially system-constructed complex fla, try some reconstruction
		     if[not(@pid) and (name(*[1])="And") and (count(*[1]/*)>=2)] { "1"; } else { "0";}}}
	      if [$i1="1"] { copy-of $lbracket_s; " "; // " OR1 "; 
		 for-each [*[1]/*] { if [position()>1] { copy-of $or_s; }
		   $neg1 = { is_negative(#el=`.`); }
		   if [$neg1 = "1"] {
		   if [name() = "Not"] { apply[*[1]](#i=$i); } 
		     // now Pred, which is antonymous
		     else { apply[.](#i=$i,#not="1"); } }
                   else { if [name() = "For"] { apply[.](#i=$i,#ex="1"); } 
		   else { copy-of $not_s; apply[.](#i=$i); } } }  " "; copy-of $rbracket_s;
	      }

              else { copy-of $not_s; if[@pid] { comment { "HUMANRECFAILED"; } } // else {"NOPID  ";} 
                     apply[*[1]](#i=$i); } } } } 
} 
// this was too AI, mizar is much simpler
// 	     $cnt=`count(*[1]/*)`; 
// 	     $pcnt1 = { if [$i3="1"] { count_positive(#els=`*[1]/*`,#nr=$cnt); } else {"10000";} }
// 	     $pcnt = $pcnt1;
// 	     // $pcnt1; ":"; $cnt; ":"; $i3;
//              if [($pcnt>0) and ($pcnt<$cnt)] {
// 	     // "hhhhhhhhhhhh";
// 		copy-of $lbracket_s; " "; put_positive(#separ=copy-of $and_s,#els=`*[1]/*`,#nr=$pcnt,#i=$i); copy-of $imp_s; 
// 		put_positive(#separ=copy-of $or_s,#els=`*[1]/*`,#nr=`$cnt - $pcnt`,#neg="1",#i=$i); copy-of $rbracket_s; 
// 	     }
//              else { if [($i3="1") and ($pcnt=0)] { copy-of $lbracket_s; " "; put_positive(#separ=copy-of $or_s,#els=`*[1]/*`,#nr=$cnt,#neg="1",#i=$i); copy-of $rbracket_s; }
//	     if [$i3="1"  and (*[1]/*[not(name()="Not")]) and (*[1]/Not)] { "( ( "; 
//	     ilist(#separ=$and_s, #elems=`*[1]/*[not(name()="Not")]`, #i=$i,#pr="1");
//	    " "; copy-of $rbracket_s; copy-of $imp_s; 
//	    copy-of $lbracket_s; " "; ilist(#separ=$or_s, #elems=`*[1]/Not/*[1]`, #i=$i,#pr="1"); " ) )"; }




tpl [And](#i,#pr) { $e1= is_equiv(#el=`.`); 
    if [$e1="1"] { copy-of $lbracket_s; " ";
       apply[*[1]/*[1]/*[1]](#i=$i,#pr="1"); copy-of $equiv_s;
       apply[*[1]/*[1]/*[2]/*[1]](#i=$i); " "; copy-of $rbracket_s; }
    else { // a bit risky
    if [(@pid=$pid_Iff) and (count(*)=2)] {
       $i1= is_impl(#el=`*[1]`);
       if [$i1="1"] { copy-of $lbracket_s; " "; apply[*[1]/*[1]/*[1]](#i=$i,#pr="1"); copy-of $equiv_s; 
			apply[*[1]/*[1]/*[2]/*[1]](#i=$i); " "; copy-of $rbracket_s; }
       else { $i2= is_impl(#el=`*[2]`);
       if [$i2="1"] { copy-of $lbracket_s; " "; apply[*[2]/*[1]/*[2]/*[1]](#i=$i,#pr="1"); copy-of $equiv_s; 
		      apply[*[2]/*[1]/*[1]](#i=$i); " "; copy-of $rbracket_s; }
       else { $i3 = is_impl1(#el=`*[1]`); $i4 = is_impl1(#el=`*[2]`);
       if [($i3 > 0) or ($i4 > 0)] { // select better impl - no, prefer the first
       $which = { if [($i3 = 0)] { "2"; } else { "1"; }}
//		  if [($i4 = 0)] { "1"; } else { 
//		  if [$i3 > $i4] { "2"; } else { "1"; }}}}
       $i5 = { if [$which=1] { $i3; } else { $i4; }}
       for-each [*[position()=$which]] { // " IFF2: "; $which; 
             copy-of $lbracket_s; " ";
	     if [$i5=2] {
		ilist(#separ = $and_s, #elems=`*[1]/*[not(@pid=$pid_Impl_RightNot)]`, #i=$i,#pr="1"); copy-of $equiv_s; 
		apply[*[1]/*[@pid=$pid_Impl_RightNot]/*[1]](#i=$i); }
             else { 
	        ilist(#separ = $and_s, #elems=`*[1]/*[position()<last()]`, #i=$i,#pr="1"); copy-of $equiv_s; 
                choose {
		when [$i5=3] { 
		     if [name(*[1]/*[position()=last()]) = "Not"] {
			apply[*[1]/*[position()=last()]/*[1]](#i=$i); } 
			// now Pred, which is antonymous
                     else { apply[*[1]/*[position()=last()]](#i=$i,#not="1"); } }
		when [$i5=4] { 
		     apply[*[1]/*[position()=last()]](#i=$i,#ex="1"); }
		when [$i5=5] { 
		     copy-of $not_s; apply[*[1]/*[position()=last()]](#i=$i); }
                }} " "; copy-of $rbracket_s;
	}}		      
       else { copy-of $lbracket_s; " "; comment { "HUMANRECFAILED";} ilist(#separ=$and_s, #elems=`*`, #i=$i,#pr="1"); " "; copy-of $rbracket_s; }}}}
    else { copy-of $lbracket_s; " "; // if[not(@pid)] { " NOPID ";} 
           ilist(#separ=$and_s, #elems=`*`, #i=$i,#pr="1"); " "; copy-of $rbracket_s; }}}

tpl [Pred](#i,#not,#pr) 
{
    choose 
    {
      when [@kind='P'] 
      { 
         pschpvar(#nr=`@nr`); 
	 "["; ilist(#separ=",", #elems=`*`, #i = $i); "]";
      }
      when [(@kind='V') or (@kind='R')]  
      { 
	   $pi = { patt_info(#k=`@kind`, #nr=`@nr`, #pid =`@pid`); }
	   $fnr = car(#l=$pi);
	   $antonym = cadr(#l=$pi);
	   $plink = third(#l=$pi);
	   $pid = { if [$plink="1"] { `@pid`; } else { "0";} }
	   $predattr = { if [$antonym>1] { "1";} else { "0"; }}
	   $neg = { if [$not="1"] { `($antonym + $not) mod 2`; }
		    else { `$antonym mod 2`; }}
           if [$neg="1"] { copy-of $not_s;}
           if [(@kind='V') and ($predattr="0")] 
       	   {
	       apply[*[position() = last()]](#i = $i); copy-of $is_s;  
	       pp(#k=`@kind`,#nr=`@nr`,#args=`*[position() < last()]`,#pid=`@pid`,#i=$i);
	       // abs(#k=`@kind`, #nr=`@nr`, #sym=abs1(#k=`@kind`, #nr=`@nr`, #fnr=$fnr, #pid=$pid)); 
           }
           else { pp(#k=`@kind`,#nr=`@nr`,#args=`*`,#pid=`@pid`,#i=$i); }
      } 
    }
}
//,#sym1=abs(#k=`@kind`, #nr=`@nr`, #sym=abs1(#k=`@kind`, #nr=`@nr`))); }}
//  "[ "; list(#separ=",", #elems=`*`); "]"; }


tpl [PrivPred](#i,#pr,#not) { if [$not="1"] { copy-of $not_s; } pppred(#nr=`@nr`); "["; 
    ilist(#separ=",", #elems=`*[position() < last()]`, #i = $i); "]"; }
tpl [Is](#i,#pr,#not) { apply[*[1]](#i = $i); copy-of $is_s; if [$not="1"] { copy-of $not_s; } apply[*[2]](#i = $i); } 
tpl [Verum](#i,#pr,#not) { if [$not="1"] { "contradiction"; } else { "verum";} }
tpl [ErrorFrm](#i,#pr,#not) { if [$not="1"] { copy-of $not_s; } "errorfrm"; }

tpl [FlexFrm](#i,#pr,#not)
{ 
   $conn = { if [$not="1"] { $or_s; } else { $and_s; } }
   apply[*[1]](#i = $i, #pr = $pr, #not = $not); 
   $conn; copy-of $dots_s; $conn; 
   apply[*[2]](#i = $i, #pr = $pr, #not = $not);
} 

// Terms
// #p is the parenthesis count
// #i is the size of the var stack
tpl [Var](#p,#i) { 
    if [$print_identifiers > 0]
    {
      $vid = { get_vid(#up = `$i - @nr`); }
      pqvar(#nr = `@nr`, #vid = $vid);
    }
    else { pvar(#nr=`@nr`); } 
}

// search parent For and Fraenkel for #nr, return its vid
// #bound says how many vars ( -1) are currently quantified
// (depth of the quantifier stack), so we need to go 
// #bound - #nr times up (this is now passed just as #up)
tpl get_vid(#up) {
    if [name() = "For"] {
       if [$up = "0"] { `@vid`; }
       else { for-each [..] { get_vid(#up = `$up - 1`); } } 
    }
    else { 
    if [(name() = "Typ") and (name(..) = "Fraenkel")] {
       // the case for var inside fraenkel typ - 
       // only previous lamdaargs are available
       $tnr = `count(preceding-sibling::Typ)`;
       if [$up < $tnr] { 
          `preceding-sibling::Typ[position() = (last() - $up)]/@vid`; }
       else { for-each [../..] { get_vid(#up = `$up - $tnr`); } }
    }
    else {
    if [name() = "Fraenkel"] {
       // the case for var inside lambdaterm and lambdaformula -
       // all lamdaargs are available
       $tnr = `count(Typ)`;
       if [$up < $tnr] { 
          `Typ[position() = (last() - $up)]/@vid`; }
       else { for-each [..] { get_vid(#up = `$up - $tnr`); } }
    }
    else { for-each [..] { get_vid(#up = $up); } } } } 
}


// trickery to translate loci to constants and identifiers when needed
// this unfortunately does not work for IdentifyRegistration, so that's
// dealt with by looking at the compatibility fla now :-(
// ###TODO: also the constructor types
tpl [LocusVar](#p, #i) 
{ 
    // try definienda possibly containing "it"
    if [($mml="0") and (ancestor::DefMeaning)]
    {
       $it_possible = { if [(ancestor::Definiens[(@constrkind="M") or (@constrkind="K")])]
		        { "1"; }
			else { "0"; } }

       $maxnr = { for-each [ancestor::Definiens] { `count(Typ)`;} }

       if [(@nr = $maxnr) and ($it_possible="1")] 
       { 
          pkeyword(#str="it"); 
       }
       else 
       {
          if [@nr <= $maxnr] 
	  {
	     $nr = `@nr`;
	     // preceding-sibling written this way selects in reverse document order
	     for-each [ancestor::Definiens]
	     {
	        $argtypes = `preceding-sibling::DefinitionBlock[1]/Let/Typ`;
		ppconst(#nr = $nr, #vid = `$argtypes[position() = $nr]/@vid`);
             }
	  }
	  else 
	  { 
	     ploci(#nr = `@nr`); 
	  }
       }
    }
    else 
    {
       // note that the Constructor may come from different document here
       // even if $mml = 0, but that can be handled above, because this is
       // only used for result types which in that case shouldn't have changed
       // Exapnsion used for expandable mode defs
       if [($mml="0") and ((ancestor::Constructor) or (ancestor::Expansion)) and (ancestor::Definition)]
       {
          $nr = `@nr`;
	  $argtypes = `ancestor::DefinitionBlock/Let/Typ`;
	  ppconst(#nr = $nr, #vid = `$argtypes[position() = $nr]/@vid`);
       }
       else 
       {
          if [($mml="0") and (ancestor::Registration)]
	  {
             $nr = `@nr`;
	     $argtypes = `ancestor::RegistrationBlock/Let/Typ`;
	     ppconst(#nr = $nr, #vid = `$argtypes[position() = $nr]/@vid`);
	  }
	  else 
	  {
	     if [($mml="0") and ((ancestor::DefPred) or (ancestor::DefFunc))]
	     { 
	        "$"; `@nr`;
             }
	     else 
	     { 
                ploci(#nr = `@nr`); 
	     }
	  }
       }
    }
}

tpl [FreeVar](#p,#i) { "X"; `@nr`; }
tpl [Const](#p,#i) 
{ 
    if [($print_identifiers > 0)  and ((@vid>0) or ($proof_links>0))]
    {
       if [@vid > 0]
       {
          $pl = { if[$const_links=2]  { get_nearest_level(#el = `..`); } }
          ppconst(#nr = `@nr`, #vid = `@vid`, #pl = $pl);
       } 
       else    
       {
          $pl = get_nearest_level(#el = `..`); 
	  absconst(#nr = `@nr`, #pl = $pl);
       }
    }
    else 
    { 
       pconst(#nr = `@nr`); 
    }
}
tpl [InfConst](#p,#i) { "D"; `@nr`; }
tpl [Num](#p,#i) {  `@nr`; }
tpl [Func](#p,#i) { 
    choose {
      when [@kind='F'] { pschfvar(#nr=`@nr`); 
	   copy-of $lbracket_s; ilist(#separ=",", #elems=`*`, #i = $i); copy-of $rbracket_s;}
      when [@kind='U'] { copy-of $the_sel_s;
        abs(#k=`@kind`, #nr=`@nr`, #sym=abs1(#k=`@kind`, #nr=`@nr`));
        copy-of $of_sel_s; apply[*[position() = last()]](#p = $p, #i = $i); }
      otherwise { 
        $par = { if [$p>0] { `$p+1`;} else { 
                 if [name(..)='Func'] { "1"; } else { "0";} }  }
        pp(#k=`@kind`,#nr=`@nr`,#args=`*`,#parenth=$par,#pid=`@pid`,#i=$i); }}} 

tpl [PrivFunc](#p,#i) { ppfunc(#nr=`@nr`); copy-of $lbracket_s; 
    ilist(#separ=",", #elems=`*[position()>1]`, #i = $i); copy-of $rbracket_s; }
tpl [ErrorTrm](#p,#i) { "errortrm"; }
tpl [Choice](#p,#i) { copy-of $choice_s; apply[Typ](#i = $i); }
tpl [Fraenkel](#p,#i) {
    $j = { if [$i] { $i;} else { "0"; } }
    $par = { if [$p>0] { `$p+1`;} else { "1"; } }
    $inc = { `count(*) - 2`; } // number of vars introduced here
    $paren_color = `$par mod $pcolors_nr`;
     <span { @class=`concat("p",$paren_color)`; copy-of $fraenkel_start; 
       <span { @class="default"; " ";
         // first display the term
         apply[*[position() = last() - 1]](#p = $par, #i = `$j + $inc`); 
	 // then the var types
         if  [count(*)>2] 
	 { 
	     " where ";  
	     for-each[*[position() < last() - 1]] 
	     {
		pqvar(#nr = `$j + position()`, #vid = `@vid`);
		$eq1 = { if [position()=last()] { "0"; } else {
			    are_equal_vid(#el1=`.`,#el2=`following-sibling::*[1]`); } }
		if [$eq1="0"]  {  copy-of $is_s; apply[.](#i=`$j + position() - 1`); }
                if [not(position()=last())] { ", "; }
              }
          }
	 // then the formula
         " : "; apply[*[position() = last()]](#i = `$j + $inc`); " "; }
       copy-of $fraenkel_end; } " ";
 }

// Types
// element Typ {
//    attribute kind { "M" | "G" | "L" | "errortyp" },
//    attribute nr { xsd:integer }?,
//    ( attribute absnr { xsd:integer },
//      attribute aid { xsd:string } )?,
//    attribute pid { xsd:integer }?,
//    Cluster*,
//    Term*
//  }
tpl [Typ](#i) 
{ 
   " ";
   if [count(*)>0] { apply[*[1]](#i = $i); }
   if [(@kind="M") or (@kind="G") or (@kind="L")] 
   { 
      $pi     = { patt_info(#k = `@kind`, #nr = `@nr`, #pid = `@pid`); }
//DEBUG ":"; `@pid`; ":"; $pi; ":";
      $fnr    = car(#l = $pi);
      $expand = cadr(#l = $pi);
      $plink  = third(#l = $pi);
      $k1     = { if [@kind = "M"] { "M"; } else { "L";} }

      if [($expand="0") or not(@pid)] 
      {
         pp(#k = $k1, #nr = `@nr`, #args = `*[not(name()="Cluster")]`,
            #pid = `@pid`, #i = $i);
      }
      else 
      {
         $sym = abs1(#k = `@kind`, #nr = `@nr`, #fnr = $fnr);
	 $vis = cdddr(#l = $pi); 
	 $el  = `.`;  //DEBUG ":"; `@pid`; ":"; $pi; ":";
	 $pid = `@pid`;
	 $doc = { if [key('EXP',$pid)] { ""; } else { $patts; } }
	 $c1  = { if [($doc = "") and ($mml = "0")] { "1"; } else { "0"; } }

	 for-each [document($doc,/)] 
	 { 
	    absref(#elems = `key('EXP',$pid)`, #c = $c1, #sym = $sym, #pid = $pid);
	    if [not($vis = "")] 
	    { 
	       $of_typ_s;
	       for-each [key('EXP',$pid)] 
	       {
	          descent_many_vis(#patt = `Expansion/Typ`, #fix = $el, 
			           #vis = `Visible/Int`, #i = $i); 
               }
            }
         }
      }
   }
   else { `@kind`; }
}

// Gets two Typ (#patt and #fix), and a list of Visible/Int .
// Tries to find and print the terms in #fix corresponding
// to the visible loci; #patt is structurally similar to
// #fix, up to the loci .
// The handling of #i is potentially incorrect if there is a Fraenkel as 
// a param of the type .
// Newly we also descent through Clusters, because dependent adjectives
// allow things like: mode ManySortedSet of I is  I -defined total Function .
// We still optimize by starting with the terms (after "of"), the clusters
// are used last (if nothing was found in terms).
tpl descent_many_vis(#patt,#fix,#vis,#i)
{ 
  if [$vis] 
  {
    $v1= `$vis[position()=1]/@x`;
    $v2= `$vis[position()>1]`;
    $adjnrs = { for-each [$patt/Cluster[1]/Adjective] { ":"; `@nr`; ":"; } }
//DEBUG    "descen:"; $v1; ":"; apply[$patt]; ":"; 
    descent_many(#patts = `$patt/*[(not(name()="Cluster"))] | $patt/Cluster[1]/Adjective`,
		 #fixs  = `$fix/*[(not(name()="Cluster"))] | $fix/Cluster[1]/Adjective[(contains($adjnrs, concat(":",@nr,":")))]`,
		 #lnr   = $v1,
		 #nr    = `count($patt/*[(not(name()="Cluster"))]) + count($patt/Cluster[1]/Adjective)`,
		 #i     = $i); 
    if [$v2] { ","; descent_many_vis(#patt=$patt,#fix=$fix,
		    #vis=`$vis[position()>1]`, #i = $i); }
  }
}

tpl descent_many(#patts,#fixs,#lnr,#nr,#i)
{ 
  if [$nr > 0] 
  {
    $patt=`$patts[position()=$nr]`;
    $fix =`$fixs[position()=$nr]`;
//DEBUG "desone:"; $nr; ":"; `name($patt)`; ":"; `name($fix)`; ":";
    if [(name($patt)="LocusVar") and ($patt/@nr=$lnr)] { 
//DEBUG    $lnr; ":"; `$patt/@nr`; ":";  "fff";
	  for-each [$top] { apply[$fix](#p="0", #i = $i); } } 
// the duplication here is needed to generated the html properly;
// it does not cause any visible slowdown in practice
    else { $res= { if [name($patt) = name($fix)] { 
		      descent_many(#patts=`$patt/*`,#fixs=`$fix/*`,
				   #lnr=$lnr,#nr=`count($patt/*)`, #i = $i);  } 
                   else {"";}} 
      if [$res and not($res="")] {
//DEBUG [and contains($res,"fff")]
	  descent_many(#patts=`$patt/*`,#fixs=`$fix/*`,
		      #lnr=$lnr,#nr=`count($patt/*)`, #i = $i);  }
      else 
      { descent_many(#patts=$patts,#fixs=$fixs,#lnr=$lnr,#nr=`$nr - 1`, #i = $i); }}
  }
}

// Clusters
// only attributes with pid are now printed, unless %all=1;
// others are results of 
// cluster mechanisms - this holds in the current article 
// (.xml file) only, environmental files do not have the @pid 
// info (yet), so we print everything for them
tpl [Cluster](#i,#all) 
{ 
   if [($print_all_attrs = 1) or ($all = 1)]
   {
      list(#separ=" ", #elems=`*`);
   }
   else
   {
      list(#separ=" ", #elems=`*[@pid]`);
   }

   " "; 
}

// Adjective
//  element Adjective {
//    attribute nr { xsd:integer },
//    attribute value { xsd:boolean }?,
//    ( attribute absnr { xsd:integer },
//      attribute aid { xsd:string } )?,
//    attribute kind { "V" }?,
//    attribute pid { xsd:integer }?,
//    Term*
//  }
tpl [Adjective](#i) 
{ 
     $pi    = { patt_info(#k="V", #nr=`@nr`, #pid =`@pid`); }
     $fnr   = car(#l = $pi);
     $anto  = cadr(#l = $pi);
     $plink = third(#l = $pi);

     $pid   = { if [$plink="1"] { `@pid`; } else { "0";} }
     $neg   = { if [@value="false"] { `($anto + 1) mod 2`; } else { `$anto mod 2`; }}

     if [$neg="1"] 
     { 
        copy-of $non_s;
     }

     pp(#k="V",#nr=`@nr`,#args=`*`,#pid=`@pid`,#i=$i);
//     abs(#k="V", #nr=`@nr`,#sym=abs1(#k="V", #nr=`@nr`, #fnr=$fnr, #pid=$pid), #pid = $pid); 
}




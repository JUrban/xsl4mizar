stylesheet 1.0;

output method=html;

// $Revision: 1.24 $
//
// File: params.xsltxt - html-ization of Mizar XML, top-level parameters
//
// Author: Josef Urban
//
// License: GPL (GNU GENERAL PUBLIC LICENSE)



// The following are user-customizable 

// mmlquery address
#mmlq= { "http://merak.pb.bialystok.pl/mmlquery/fillin.php?entry="; }
//#mmlq= {"";}

// linking methods:
// "q" - query, everything is linked to mmlquery
// "s" - self, everything is linked to these xml/html files
// "m" - mizaring and mmlquery, current article's constructs are linked to self,
//       the rest is linked to mmlquery
// "l" - local mizaring, current article's constructs are linked to self,
//       the rest to $MIZFILES/html
#linking = { "l"; }

// needed for local linking, document("") gives the sylesheet as a document
#mizfiles = { `string(/*/@mizfiles)`; }
#mizhtml  = { `concat("file://",$mizfiles,"html/")`; }

// extension for linking to other articles - either xml or html
#ext = { "html"; }

// extension for linking to other articles - either xml or html
#selfext = 
{ 
   choose 
   { 
      when [$linking = "l"] { "xml";  }
      when [$linking = "s"] { $ext;   }
      when [$linking = "m"] { "xml";  }
      when [$linking = "q"] { "html"; }
   }
}

// default target frame for links
#default_target = { if [$linking = "s"] { "_self"; } else { "mmlquery";} } 

// put titles to links or not
#titles = { "0"; }

// coloured output or not
#colored = { "0"; }


// print identifiers (like in JFM) instead of normalized names
$print_identifiers = { "1"; }

// print label identifiers  instead of normalized names
// this is kept separate from $print_identifiers, because
// it should be turned off for item generating
$print_lab_identifiers = { "1"; }


// tells whether relative or absolute names are shown
#relnames= { "1"; }

// link by (now also from) inferences to ATP solutions rendered by MMLQuery; experimental - off
// 1 - static linking (to pre-generated html)
// 2 - dynamic linking to MML Query (static dli sent to MMLQuery DLI-processor)
// 3 - dynamic linking to the TPTP-processor CGI ($lbytptpcgi)
#linkby= { "0"; }

// if > 0, call the mk_by_title function to create a title for by|from|;
#by_titles = { "0"; }

// If 1, the target frame for by explanations is _self
#linkbytoself = { "0"; }

// directory with by ATP solutions in HTML; each article in its own subdir
#lbydir= { "_by/"; }

// directory with by ATP solutions in DLI; each article in its own subdir
// now whole url for the CGI script
#lbydliurl= { "http://lipa.ms.mff.cuni.cz/~urban/xmlmml/html.930/_by_dli/"; }

// URL of the DLI-processor CGI
#lbydlicgi= { "http://mmlquery.mizar.org/cgi-bin/mmlquery/dli"; }

// complete prefix of the DLI-processor CGI request
$lbydlicgipref= { `concat($lbydlicgi,"?url=",$lbydliurl)`; }

// URL of the MizAR root dir
#ltptproot= { "http://octopi.mizar.org/~mptp/"; }

// URL of the TPTP-processor CGI
#ltptpcgi= { `concat($ltptproot,"cgi-bin/")`; }

// URL of the showby CGI
#lbytptpcgi= { `concat($ltptpcgi,"showby.cgi")`; }

// URL of the showtmpfile CGI
#ltmpftptpcgi= { `concat($ltptpcgi,"showtmpfile.cgi")`; }

// tells if by action is fetched through AJAX; default is off
#ajax_by = { "0"; }


// temporary dir with  the tptp by files, needs to be passed as a param
#lbytmpdir = { ""; }

// additional params for lbytptpcgi, needs to be passed as a param
#lbycgiparams = { ""; }


// add links to tptp files for thms
#thms_tptp_links = { "0"; }

// tells if linkage of proof elements is done; default is off
#proof_links = { "0"; }

// tells if linkage of constants is done; default is 0 (off),
// 1 tells to only create the anchors, 2 tells to also link constants
// ##TODO: 2 is implement incorrectly and should not be used now,
//         it should be done like privname (via the C key, not like now)
#const_links = { "0"; }

// tells if proofs are fetched through AJAX; default is off
#ajax_proofs = { "0"; }

// the dir with proofs that are fetched through AJAX
#ajax_proof_dir = { "proofs"; }

// tells to display thesis after skeleton items
#display_thesis = { "1"; }

// tells if only selected items are generated to subdirs; default is off
#generate_items = { "0"; }

// relevant only if $generate_items>0
// tells if proofs of selected items are generated to subdirs; default is off
#generate_items_proofs = { "0"; }

// add IDV links and icons
#idv =  { "0"; }

// create header info from .hdr file
#mk_header =  { "0"; }

// Suppress the header and trailer of the final document. 
// Thus, you can insert the resulting document into a larger one.
#body_only = { "0"; }

$lcletters= { "abcdefghijklmnopqrstuvwxyz"; }
$ucletters= { "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; } 

// name of current article (upper case)
#aname= { `string(/*/@aid)`; }

// name of current article (lower case)
#anamelc= { `translate($aname, $ucletters, $lcletters)`; }

// this needs to be set to 1 for processing MML files
#mml = { if [/Article] { "0"; } else { "1"; } }

// nr. of clusters in Typ
// this is set to 1 for processing MML files
#cluster_nr = { if [$mml = "0"] { "2"; } else { "1"; }}

// whether we print all attributes (not just those with @pid)
// this is set to 1 for processing MML files
#print_all_attrs = { $mml; }

// .atr file with imported constructors
#constrs=  { `concat($anamelc, '.atr')`; }

// .eth file with imported theorems
#thms=  { `concat($anamelc, '.eth')`; }

// .esh file with imported schemes
#schms=  { `concat($anamelc, '.esh')`; }

// .eno file with imported patterns
#patts=  { `concat($anamelc, '.eno')`; }

// .frx file with all (both imported and article's) formats
#formats=  { `concat($anamelc, '.frx')`; }

// .dcx file with vocabulary
#vocs=  { `concat($anamelc, '.dcx')`; }

// .idx file with identifier names
#ids=  { `concat($anamelc, '.idx')`; }

// .dfs file with imported definientia
#dfs=  { `concat($anamelc, '.dfs')`; }

// .hdr file with header info (done by mkxmlhdr.pl)
#hdr=  { `concat($anamelc, '.hdr')`; }

#varcolor = { "Olive"; }

#constcolor = { "Maroon"; }

#locicolor = { "Maroon"; }

#schpcolor = { "Maroon"; }

#schfcolor = { "Maroon"; }

#ppcolor = { "Maroon"; }

#pfcolor = { "Maroon"; }

#labcolor = { "Green"; }

#commentcolor = { "Red"; }

// use spans for brackets
#parenspans = { "1"; }

// number of parenthesis colors (see the stylesheet in the bottom)
#pcolors_nr = { "6"; }

// top level element instead of top-level document, which is hard to
// know
#top = `/`;

// debugging message
#dbgmsg = { "zzzzzzzzz"; }

// relative nr of the first expandable mode
// #first_exp = { `//Pattern[(@constrkind='M') and (@constrnr=0)][1]/@relnr`; }

